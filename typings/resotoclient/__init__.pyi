"""
This type stub file was generated by pyright.
"""

import logging
import requests
import random
import string
from requests.structures import CaseInsensitiveDict
from resotoclient.jwt_utils import encode_jwt_to_headers
from typing import Any, Dict, Iterator, List, Optional, Sequence, Set, Tuple, Type
from types import TracebackType
from resotoclient.json_utils import json_dump, json_load, json_loadb
from resotoclient.ca import CertificatesHolder
from resotoclient.models import ConfigValidation, EstimatedSearchCost, GraphUpdate, JsObject, JsValue, Kind, Model, ParsedCommand, ParsedCommands, Subscriber, Subscription
from requests_toolbelt import MultipartEncoder
from datetime import timedelta

FilenameLookup = Dict[str, str]
log: logging.Logger = ...
class ResotoClient:
    """
    The ApiClient interacts wit"""
    def __init__(self, url: str, psk: Optional[str], custom_ca_cert_path: Optional[str] = ..., verify: bool = ..., renew_before: timedelta = ...) -> None:
        ...
    
    def __enter__(self) -> ResotoClient:
        ...
    
    def __exit__(self, exc_type: Optional[Type[BaseException]], exc_val: Optional[BaseException], exc_tb: Optional[TracebackType]) -> None:
        ...
    
    def start(self) -> None:
        ...
    
    def shutdown(self) -> None:
        ...
    
    def model(self) -> Model:
        ...
    
    def update_model(self, update: List[Kind]) -> Model:
        ...
    
    def list_graphs(self) -> Set[str]:
        ...
    
    def get_graph(self, name: str) -> Optional[JsObject]:
        ...
    
    def create_graph(self, name: str) -> JsObject:
        ...
    
    def delete_graph(self, name: str, truncate: bool = ...) -> str:
        ...
    
    def create_node(self, parent_node_id: str, node_id: str, node: JsObject, graph: str = ...) -> JsObject:
        ...
    
    def patch_node(self, node_id: str, node: JsObject, section: Optional[str] = ..., graph: str = ...) -> JsObject:
        ...
    
    def get_node(self, node_id: str, graph: str = ...) -> JsObject:
        ...
    
    def delete_node(self, node_id: str, graph: str = ...) -> None:
        ...
    
    def patch_nodes(self, nodes: Sequence[JsObject], graph: str = ...) -> List[JsObject]:
        ...
    
    def merge_graph(self, update: List[JsObject], graph: str = ...) -> GraphUpdate:
        ...
    
    def add_to_batch(self, update: List[JsObject], batch_id: Optional[str] = ..., graph: str = ...) -> Tuple[str, GraphUpdate]:
        ...
    
    def list_batches(self, graph: str = ...) -> List[JsObject]:
        ...
    
    def commit_batch(self, batch_id: str, graph: str = ...) -> None:
        ...
    
    def abort_batch(self, batch_id: str, graph: str = ...) -> None:
        ...
    
    def search_graph_raw(self, search: str, graph: str = ...) -> JsObject:
        ...
    
    def search_graph_explain(self, search: str, graph: str = ...) -> EstimatedSearchCost:
        ...
    
    def search_list(self, search: str, section: Optional[str] = ..., graph: str = ...) -> Iterator[JsObject]:
        ...
    
    def search_graph(self, search: str, section: Optional[str] = ..., graph: str = ...) -> Iterator[JsObject]:
        ...
    
    def search_aggregate(self, search: str, graph: str = ...) -> Iterator[JsObject]:
        ...
    
    def subscribers(self) -> List[Subscriber]:
        ...
    
    def subscribers_for_event(self, event_type: str) -> List[Subscriber]:
        ...
    
    def subscriber(self, uid: str) -> Optional[Subscriber]:
        ...
    
    def update_subscriber(self, uid: str, subscriptions: List[Subscription]) -> Optional[Subscriber]:
        ...
    
    def add_subscription(self, uid: str, subscription: Subscription) -> Subscriber:
        ...
    
    def delete_subscription(self, uid: str, subscription: Subscription) -> Subscriber:
        ...
    
    def delete_subscriber(self, uid: str) -> None:
        ...
    
    def cli_evaluate(self, command: str, graph: str = ..., **env: str) -> List[Tuple[ParsedCommands, List[JsObject]]]:
        ...
    
    def cli_execute_raw(self, command: str, graph: Optional[str] = ..., section: Optional[str] = ..., headers: Optional[Dict[str, str]] = ..., files: Optional[FilenameLookup] = ..., **env: str) -> requests.Response:
        ...
    
    def cli_execute(self, command: str, graph: Optional[str] = ..., section: Optional[str] = ..., headers: Optional[Dict[str, str]] = ..., files: Optional[FilenameLookup] = ..., **env: str) -> Iterator[JsValue]:
        """
        Execute a CLI command a"""
        ...
    
    def cli_info(self) -> JsObject:
        ...
    
    def configs(self) -> Iterator[str]:
        ...
    
    def config(self, config_id: str) -> JsObject:
        ...
    
    def put_config(self, config_id: str, json: JsObject, validate: bool = ...) -> JsObject:
        ...
    
    def patch_config(self, config_id: str, json: JsObject) -> JsObject:
        ...
    
    def delete_config(self, config_id: str) -> None:
        ...
    
    def get_configs_model(self) -> Model:
        ...
    
    def update_configs_model(self, update: List[Kind]) -> Model:
        ...
    
    def list_configs_validation(self) -> Iterator[str]:
        ...
    
    def get_config_validation(self, cfg_id: str) -> Optional[ConfigValidation]:
        ...
    
    def put_config_validation(self, cfg: ConfigValidation) -> ConfigValidation:
        ...
    
    def ping(self) -> str:
        ...
    
    def ready(self) -> str:
        ...
    


def rnd_str(str_len: int = ...) -> str:
    ...

